// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// hello_world
void hello_world();
RcppExport SEXP _RCRnormCpp_hello_world() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    hello_world();
    return R_NilValue;
END_RCPP
}
// linearRegression
Rcpp::List linearRegression(const arma::mat& X, const arma::colvec& y);
RcppExport SEXP _RCRnormCpp_linearRegression(SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(linearRegression(X, y));
    return rcpp_result_gen;
END_RCPP
}
// rinvGamma
NumericVector rinvGamma(int n, double shape, double rate);
RcppExport SEXP _RCRnormCpp_rinvGamma(SEXP nSEXP, SEXP shapeSEXP, SEXP rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< double >::type rate(rateSEXP);
    rcpp_result_gen = Rcpp::wrap(rinvGamma(n, shape, rate));
    return rcpp_result_gen;
END_RCPP
}
// lbLambdaUb
double lbLambdaUb(double lambda, double lb, double ub);
RcppExport SEXP _RCRnormCpp_lbLambdaUb(SEXP lambdaSEXP, SEXP lbSEXP, SEXP ubSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< double >::type ub(ubSEXP);
    rcpp_result_gen = Rcpp::wrap(lbLambdaUb(lambda, lb, ub));
    return rcpp_result_gen;
END_RCPP
}
// lambdaLbUb
double lambdaLbUb(double lambda, double lb, double ub);
RcppExport SEXP _RCRnormCpp_lambdaLbUb(SEXP lambdaSEXP, SEXP lbSEXP, SEXP ubSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< double >::type ub(ubSEXP);
    rcpp_result_gen = Rcpp::wrap(lambdaLbUb(lambda, lb, ub));
    return rcpp_result_gen;
END_RCPP
}
// lbUbLambda
double lbUbLambda(double lambda, double lb, double ub);
RcppExport SEXP _RCRnormCpp_lbUbLambda(SEXP lambdaSEXP, SEXP lbSEXP, SEXP ubSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< double >::type ub(ubSEXP);
    rcpp_result_gen = Rcpp::wrap(lbUbLambda(lambda, lb, ub));
    return rcpp_result_gen;
END_RCPP
}
// rtruncatedStandardNormPositive
NumericVector rtruncatedStandardNormPositive(int n, double lb, double ub);
RcppExport SEXP _RCRnormCpp_rtruncatedStandardNormPositive(SEXP nSEXP, SEXP lbSEXP, SEXP ubSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< double >::type ub(ubSEXP);
    rcpp_result_gen = Rcpp::wrap(rtruncatedStandardNormPositive(n, lb, ub));
    return rcpp_result_gen;
END_RCPP
}
// rtruncatedStandardNormPositiveExtreme
NumericVector rtruncatedStandardNormPositiveExtreme(int n, double lb, double ub);
RcppExport SEXP _RCRnormCpp_rtruncatedStandardNormPositiveExtreme(SEXP nSEXP, SEXP lbSEXP, SEXP ubSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< double >::type ub(ubSEXP);
    rcpp_result_gen = Rcpp::wrap(rtruncatedStandardNormPositiveExtreme(n, lb, ub));
    return rcpp_result_gen;
END_RCPP
}
// rtruncatedStandardNormNegative
NumericVector rtruncatedStandardNormNegative(int n, double lb, double ub);
RcppExport SEXP _RCRnormCpp_rtruncatedStandardNormNegative(SEXP nSEXP, SEXP lbSEXP, SEXP ubSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< double >::type ub(ubSEXP);
    rcpp_result_gen = Rcpp::wrap(rtruncatedStandardNormNegative(n, lb, ub));
    return rcpp_result_gen;
END_RCPP
}
// rtruncatedStandardNormNegativeExtreme
NumericVector rtruncatedStandardNormNegativeExtreme(int n, double lb, double ub);
RcppExport SEXP _RCRnormCpp_rtruncatedStandardNormNegativeExtreme(SEXP nSEXP, SEXP lbSEXP, SEXP ubSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< double >::type ub(ubSEXP);
    rcpp_result_gen = Rcpp::wrap(rtruncatedStandardNormNegativeExtreme(n, lb, ub));
    return rcpp_result_gen;
END_RCPP
}
// rtruncatedStandardNorm
NumericVector rtruncatedStandardNorm(int n, double lb, double ub);
RcppExport SEXP _RCRnormCpp_rtruncatedStandardNorm(SEXP nSEXP, SEXP lbSEXP, SEXP ubSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< double >::type ub(ubSEXP);
    rcpp_result_gen = Rcpp::wrap(rtruncatedStandardNorm(n, lb, ub));
    return rcpp_result_gen;
END_RCPP
}
// rtruncatedNorm
NumericVector rtruncatedNorm(int n, double lb, double ub, double mu, double sd);
RcppExport SEXP _RCRnormCpp_rtruncatedNorm(SEXP nSEXP, SEXP lbSEXP, SEXP ubSEXP, SEXP muSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< double >::type ub(ubSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(rtruncatedNorm(n, lb, ub, mu, sd));
    return rcpp_result_gen;
END_RCPP
}
// generateSampleMatrix
NumericMatrix generateSampleMatrix(NumericVector p, int n_iter);
RcppExport SEXP _RCRnormCpp_generateSampleMatrix(SEXP pSEXP, SEXP n_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(generateSampleMatrix(p, n_iter));
    return rcpp_result_gen;
END_RCPP
}
// sampler
List sampler(List dat, List priors, List initial_values, NumericVector pos_conc, int n_iter);
RcppExport SEXP _RCRnormCpp_sampler(SEXP datSEXP, SEXP priorsSEXP, SEXP initial_valuesSEXP, SEXP pos_concSEXP, SEXP n_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dat(datSEXP);
    Rcpp::traits::input_parameter< List >::type priors(priorsSEXP);
    Rcpp::traits::input_parameter< List >::type initial_values(initial_valuesSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pos_conc(pos_concSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(sampler(dat, priors, initial_values, pos_conc, n_iter));
    return rcpp_result_gen;
END_RCPP
}
// findA1
NumericVector findA1(NumericMatrix neg_dat, NumericVector bi, double cc, NumericVector d_neg, int n_patient);
RcppExport SEXP _RCRnormCpp_findA1(SEXP neg_datSEXP, SEXP biSEXP, SEXP ccSEXP, SEXP d_negSEXP, SEXP n_patientSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type neg_dat(neg_datSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bi(biSEXP);
    Rcpp::traits::input_parameter< double >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d_neg(d_negSEXP);
    Rcpp::traits::input_parameter< int >::type n_patient(n_patientSEXP);
    rcpp_result_gen = Rcpp::wrap(findA1(neg_dat, bi, cc, d_neg, n_patient));
    return rcpp_result_gen;
END_RCPP
}
// findA2
NumericVector findA2(NumericMatrix pos_dat, NumericVector bi, NumericVector pos_conc, NumericVector d_pos, int n_patient);
RcppExport SEXP _RCRnormCpp_findA2(SEXP pos_datSEXP, SEXP biSEXP, SEXP pos_concSEXP, SEXP d_posSEXP, SEXP n_patientSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type pos_dat(pos_datSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bi(biSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pos_conc(pos_concSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d_pos(d_posSEXP);
    Rcpp::traits::input_parameter< int >::type n_patient(n_patientSEXP);
    rcpp_result_gen = Rcpp::wrap(findA2(pos_dat, bi, pos_conc, d_pos, n_patient));
    return rcpp_result_gen;
END_RCPP
}
// findA3
NumericVector findA3(NumericMatrix hk_dat, NumericVector bi, NumericVector phi, NumericVector kappa_hk, NumericVector d_hk, int n_patient, int n_hk);
RcppExport SEXP _RCRnormCpp_findA3(SEXP hk_datSEXP, SEXP biSEXP, SEXP phiSEXP, SEXP kappa_hkSEXP, SEXP d_hkSEXP, SEXP n_patientSEXP, SEXP n_hkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type hk_dat(hk_datSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bi(biSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kappa_hk(kappa_hkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d_hk(d_hkSEXP);
    Rcpp::traits::input_parameter< int >::type n_patient(n_patientSEXP);
    Rcpp::traits::input_parameter< int >::type n_hk(n_hkSEXP);
    rcpp_result_gen = Rcpp::wrap(findA3(hk_dat, bi, phi, kappa_hk, d_hk, n_patient, n_hk));
    return rcpp_result_gen;
END_RCPP
}
// findA4
NumericVector findA4(NumericMatrix reg_dat, NumericVector bi, NumericVector phi, NumericVector kappa_reg, NumericVector d_reg, int n_patient, int n_reg);
RcppExport SEXP _RCRnormCpp_findA4(SEXP reg_datSEXP, SEXP biSEXP, SEXP phiSEXP, SEXP kappa_regSEXP, SEXP d_regSEXP, SEXP n_patientSEXP, SEXP n_regSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type reg_dat(reg_datSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bi(biSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kappa_reg(kappa_regSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d_reg(d_regSEXP);
    Rcpp::traits::input_parameter< int >::type n_patient(n_patientSEXP);
    Rcpp::traits::input_parameter< int >::type n_reg(n_regSEXP);
    rcpp_result_gen = Rcpp::wrap(findA4(reg_dat, bi, phi, kappa_reg, d_reg, n_patient, n_reg));
    return rcpp_result_gen;
END_RCPP
}
// updateAi
NumericVector updateAi(List dat, NumericVector bi, double cc, NumericVector d_neg, NumericVector pos_conc, NumericVector d_pos, NumericVector phi, NumericVector kappa_hk, NumericVector d_hk, NumericVector kappa_reg, NumericVector d_reg, double mu_a, double sigma2e_neg, double sigma2e, double sigma2a);
RcppExport SEXP _RCRnormCpp_updateAi(SEXP datSEXP, SEXP biSEXP, SEXP ccSEXP, SEXP d_negSEXP, SEXP pos_concSEXP, SEXP d_posSEXP, SEXP phiSEXP, SEXP kappa_hkSEXP, SEXP d_hkSEXP, SEXP kappa_regSEXP, SEXP d_regSEXP, SEXP mu_aSEXP, SEXP sigma2e_negSEXP, SEXP sigma2eSEXP, SEXP sigma2aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dat(datSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bi(biSEXP);
    Rcpp::traits::input_parameter< double >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d_neg(d_negSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pos_conc(pos_concSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d_pos(d_posSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kappa_hk(kappa_hkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d_hk(d_hkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kappa_reg(kappa_regSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d_reg(d_regSEXP);
    Rcpp::traits::input_parameter< double >::type mu_a(mu_aSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2e_neg(sigma2e_negSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2e(sigma2eSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2a(sigma2aSEXP);
    rcpp_result_gen = Rcpp::wrap(updateAi(dat, bi, cc, d_neg, pos_conc, d_pos, phi, kappa_hk, d_hk, kappa_reg, d_reg, mu_a, sigma2e_neg, sigma2e, sigma2a));
    return rcpp_result_gen;
END_RCPP
}
// findB1
NumericVector findB1(NumericMatrix neg_dat, NumericVector ai, double cc, NumericVector d_neg, int n_patient);
RcppExport SEXP _RCRnormCpp_findB1(SEXP neg_datSEXP, SEXP aiSEXP, SEXP ccSEXP, SEXP d_negSEXP, SEXP n_patientSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type neg_dat(neg_datSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ai(aiSEXP);
    Rcpp::traits::input_parameter< double >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d_neg(d_negSEXP);
    Rcpp::traits::input_parameter< int >::type n_patient(n_patientSEXP);
    rcpp_result_gen = Rcpp::wrap(findB1(neg_dat, ai, cc, d_neg, n_patient));
    return rcpp_result_gen;
END_RCPP
}
// findB2
NumericVector findB2(NumericMatrix pos_dat, NumericVector ai, NumericVector pos_conc, NumericVector d_pos, int n_patient);
RcppExport SEXP _RCRnormCpp_findB2(SEXP pos_datSEXP, SEXP aiSEXP, SEXP pos_concSEXP, SEXP d_posSEXP, SEXP n_patientSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type pos_dat(pos_datSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ai(aiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pos_conc(pos_concSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d_pos(d_posSEXP);
    Rcpp::traits::input_parameter< int >::type n_patient(n_patientSEXP);
    rcpp_result_gen = Rcpp::wrap(findB2(pos_dat, ai, pos_conc, d_pos, n_patient));
    return rcpp_result_gen;
END_RCPP
}
// findB3
NumericVector findB3(NumericMatrix hk_dat, NumericVector ai, NumericVector phi, NumericVector kappa_hk, NumericVector d_hk, int n_patient, int n_hk);
RcppExport SEXP _RCRnormCpp_findB3(SEXP hk_datSEXP, SEXP aiSEXP, SEXP phiSEXP, SEXP kappa_hkSEXP, SEXP d_hkSEXP, SEXP n_patientSEXP, SEXP n_hkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type hk_dat(hk_datSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ai(aiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kappa_hk(kappa_hkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d_hk(d_hkSEXP);
    Rcpp::traits::input_parameter< int >::type n_patient(n_patientSEXP);
    Rcpp::traits::input_parameter< int >::type n_hk(n_hkSEXP);
    rcpp_result_gen = Rcpp::wrap(findB3(hk_dat, ai, phi, kappa_hk, d_hk, n_patient, n_hk));
    return rcpp_result_gen;
END_RCPP
}
// findB4
NumericVector findB4(NumericMatrix reg_dat, NumericVector ai, NumericVector phi, NumericVector kappa_reg, NumericVector d_reg, int n_patient, int n_reg);
RcppExport SEXP _RCRnormCpp_findB4(SEXP reg_datSEXP, SEXP aiSEXP, SEXP phiSEXP, SEXP kappa_regSEXP, SEXP d_regSEXP, SEXP n_patientSEXP, SEXP n_regSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type reg_dat(reg_datSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ai(aiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kappa_reg(kappa_regSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d_reg(d_regSEXP);
    Rcpp::traits::input_parameter< int >::type n_patient(n_patientSEXP);
    Rcpp::traits::input_parameter< int >::type n_reg(n_regSEXP);
    rcpp_result_gen = Rcpp::wrap(findB4(reg_dat, ai, phi, kappa_reg, d_reg, n_patient, n_reg));
    return rcpp_result_gen;
END_RCPP
}
// updateBi
NumericVector updateBi(List dat, NumericVector ai, double cc, NumericVector d_neg, NumericVector pos_conc, NumericVector d_pos, NumericVector phi, NumericVector kappa_hk, NumericVector d_hk, NumericVector kappa_reg, NumericVector d_reg, double mu_b, double sigma2e_neg, double sigma2e, double sigma2b);
RcppExport SEXP _RCRnormCpp_updateBi(SEXP datSEXP, SEXP aiSEXP, SEXP ccSEXP, SEXP d_negSEXP, SEXP pos_concSEXP, SEXP d_posSEXP, SEXP phiSEXP, SEXP kappa_hkSEXP, SEXP d_hkSEXP, SEXP kappa_regSEXP, SEXP d_regSEXP, SEXP mu_bSEXP, SEXP sigma2e_negSEXP, SEXP sigma2eSEXP, SEXP sigma2bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dat(datSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ai(aiSEXP);
    Rcpp::traits::input_parameter< double >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d_neg(d_negSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pos_conc(pos_concSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d_pos(d_posSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kappa_hk(kappa_hkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d_hk(d_hkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kappa_reg(kappa_regSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d_reg(d_regSEXP);
    Rcpp::traits::input_parameter< double >::type mu_b(mu_bSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2e_neg(sigma2e_negSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2e(sigma2eSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2b(sigma2bSEXP);
    rcpp_result_gen = Rcpp::wrap(updateBi(dat, ai, cc, d_neg, pos_conc, d_pos, phi, kappa_hk, d_hk, kappa_reg, d_reg, mu_b, sigma2e_neg, sigma2e, sigma2b));
    return rcpp_result_gen;
END_RCPP
}
// updateCc
double updateCc(List dat, NumericVector ai, NumericVector bi, NumericVector d_neg, double sigma2e_neg, List priors);
RcppExport SEXP _RCRnormCpp_updateCc(SEXP datSEXP, SEXP aiSEXP, SEXP biSEXP, SEXP d_negSEXP, SEXP sigma2e_negSEXP, SEXP priorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dat(datSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ai(aiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bi(biSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d_neg(d_negSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2e_neg(sigma2e_negSEXP);
    Rcpp::traits::input_parameter< List >::type priors(priorsSEXP);
    rcpp_result_gen = Rcpp::wrap(updateCc(dat, ai, bi, d_neg, sigma2e_neg, priors));
    return rcpp_result_gen;
END_RCPP
}
// updateDhk
NumericVector updateDhk(List dat, NumericVector ai, NumericVector bi, NumericVector phi, NumericVector kappa_hk, double sigma2e, double sigma2d);
RcppExport SEXP _RCRnormCpp_updateDhk(SEXP datSEXP, SEXP aiSEXP, SEXP biSEXP, SEXP phiSEXP, SEXP kappa_hkSEXP, SEXP sigma2eSEXP, SEXP sigma2dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dat(datSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ai(aiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bi(biSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kappa_hk(kappa_hkSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2e(sigma2eSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2d(sigma2dSEXP);
    rcpp_result_gen = Rcpp::wrap(updateDhk(dat, ai, bi, phi, kappa_hk, sigma2e, sigma2d));
    return rcpp_result_gen;
END_RCPP
}
// updateDneg
NumericVector updateDneg(List dat, NumericVector ai, NumericVector bi, double cc, double sigma2e_neg, double sigma2d_neg);
RcppExport SEXP _RCRnormCpp_updateDneg(SEXP datSEXP, SEXP aiSEXP, SEXP biSEXP, SEXP ccSEXP, SEXP sigma2e_negSEXP, SEXP sigma2d_negSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dat(datSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ai(aiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bi(biSEXP);
    Rcpp::traits::input_parameter< double >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2e_neg(sigma2e_negSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2d_neg(sigma2d_negSEXP);
    rcpp_result_gen = Rcpp::wrap(updateDneg(dat, ai, bi, cc, sigma2e_neg, sigma2d_neg));
    return rcpp_result_gen;
END_RCPP
}
// updateDpos
NumericVector updateDpos(List dat, NumericVector ai, NumericVector bi, NumericVector pos_conc, double sigma2e, double sigma2d);
RcppExport SEXP _RCRnormCpp_updateDpos(SEXP datSEXP, SEXP aiSEXP, SEXP biSEXP, SEXP pos_concSEXP, SEXP sigma2eSEXP, SEXP sigma2dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dat(datSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ai(aiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bi(biSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pos_conc(pos_concSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2e(sigma2eSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2d(sigma2dSEXP);
    rcpp_result_gen = Rcpp::wrap(updateDpos(dat, ai, bi, pos_conc, sigma2e, sigma2d));
    return rcpp_result_gen;
END_RCPP
}
// updateDreg
NumericVector updateDreg(List dat, NumericVector ai, NumericVector bi, NumericVector phi, NumericVector kappa_reg, double sigma2e, double sigma2d);
RcppExport SEXP _RCRnormCpp_updateDreg(SEXP datSEXP, SEXP aiSEXP, SEXP biSEXP, SEXP phiSEXP, SEXP kappa_regSEXP, SEXP sigma2eSEXP, SEXP sigma2dSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dat(datSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ai(aiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bi(biSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kappa_reg(kappa_regSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2e(sigma2eSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2d(sigma2dSEXP);
    rcpp_result_gen = Rcpp::wrap(updateDreg(dat, ai, bi, phi, kappa_reg, sigma2e, sigma2d));
    return rcpp_result_gen;
END_RCPP
}
// updateKappaHk
NumericVector updateKappaHk(List dat, NumericVector ai, NumericVector bi, NumericVector phi, NumericVector d_hk, NumericVector lambda_hk, double sigma2e, double sigma2kappa_hk);
RcppExport SEXP _RCRnormCpp_updateKappaHk(SEXP datSEXP, SEXP aiSEXP, SEXP biSEXP, SEXP phiSEXP, SEXP d_hkSEXP, SEXP lambda_hkSEXP, SEXP sigma2eSEXP, SEXP sigma2kappa_hkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dat(datSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ai(aiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bi(biSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d_hk(d_hkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda_hk(lambda_hkSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2e(sigma2eSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2kappa_hk(sigma2kappa_hkSEXP);
    rcpp_result_gen = Rcpp::wrap(updateKappaHk(dat, ai, bi, phi, d_hk, lambda_hk, sigma2e, sigma2kappa_hk));
    return rcpp_result_gen;
END_RCPP
}
// updateKappaReg
NumericVector updateKappaReg(List dat, NumericVector ai, NumericVector bi, NumericVector phi, NumericVector d_reg, NumericVector lambda_reg, double sigma2e, double sigma2kappa_reg);
RcppExport SEXP _RCRnormCpp_updateKappaReg(SEXP datSEXP, SEXP aiSEXP, SEXP biSEXP, SEXP phiSEXP, SEXP d_regSEXP, SEXP lambda_regSEXP, SEXP sigma2eSEXP, SEXP sigma2kappa_regSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dat(datSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ai(aiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bi(biSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d_reg(d_regSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda_reg(lambda_regSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2e(sigma2eSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2kappa_reg(sigma2kappa_regSEXP);
    rcpp_result_gen = Rcpp::wrap(updateKappaReg(dat, ai, bi, phi, d_reg, lambda_reg, sigma2e, sigma2kappa_reg));
    return rcpp_result_gen;
END_RCPP
}
// updateLambdaHk
NumericVector updateLambdaHk(List dat, NumericVector kappa_hk, double sigma2kappa_hk, List priors);
RcppExport SEXP _RCRnormCpp_updateLambdaHk(SEXP datSEXP, SEXP kappa_hkSEXP, SEXP sigma2kappa_hkSEXP, SEXP priorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dat(datSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kappa_hk(kappa_hkSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2kappa_hk(sigma2kappa_hkSEXP);
    Rcpp::traits::input_parameter< List >::type priors(priorsSEXP);
    rcpp_result_gen = Rcpp::wrap(updateLambdaHk(dat, kappa_hk, sigma2kappa_hk, priors));
    return rcpp_result_gen;
END_RCPP
}
// updateLambdaReg
NumericVector updateLambdaReg(List dat, NumericVector kappa_reg, double sigma2kappa_reg, List priors);
RcppExport SEXP _RCRnormCpp_updateLambdaReg(SEXP datSEXP, SEXP kappa_regSEXP, SEXP sigma2kappa_regSEXP, SEXP priorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dat(datSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kappa_reg(kappa_regSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2kappa_reg(sigma2kappa_regSEXP);
    Rcpp::traits::input_parameter< List >::type priors(priorsSEXP);
    rcpp_result_gen = Rcpp::wrap(updateLambdaReg(dat, kappa_reg, sigma2kappa_reg, priors));
    return rcpp_result_gen;
END_RCPP
}
// updateMuA
double updateMuA(List dat, NumericVector ai, double sigma2a, List priors);
RcppExport SEXP _RCRnormCpp_updateMuA(SEXP datSEXP, SEXP aiSEXP, SEXP sigma2aSEXP, SEXP priorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dat(datSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ai(aiSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2a(sigma2aSEXP);
    Rcpp::traits::input_parameter< List >::type priors(priorsSEXP);
    rcpp_result_gen = Rcpp::wrap(updateMuA(dat, ai, sigma2a, priors));
    return rcpp_result_gen;
END_RCPP
}
// updateMuB
double updateMuB(List dat, NumericVector bi, double sigma2b, List priors);
RcppExport SEXP _RCRnormCpp_updateMuB(SEXP datSEXP, SEXP biSEXP, SEXP sigma2bSEXP, SEXP priorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dat(datSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bi(biSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2b(sigma2bSEXP);
    Rcpp::traits::input_parameter< List >::type priors(priorsSEXP);
    rcpp_result_gen = Rcpp::wrap(updateMuB(dat, bi, sigma2b, priors));
    return rcpp_result_gen;
END_RCPP
}
// updatePhi
NumericVector updatePhi(List dat, NumericVector ai, NumericVector bi, NumericVector kappa_hk, NumericVector d_hk, NumericVector kappa_reg, NumericVector d_reg, double sigma2e, List priors);
RcppExport SEXP _RCRnormCpp_updatePhi(SEXP datSEXP, SEXP aiSEXP, SEXP biSEXP, SEXP kappa_hkSEXP, SEXP d_hkSEXP, SEXP kappa_regSEXP, SEXP d_regSEXP, SEXP sigma2eSEXP, SEXP priorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dat(datSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ai(aiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bi(biSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kappa_hk(kappa_hkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d_hk(d_hkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kappa_reg(kappa_regSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d_reg(d_regSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2e(sigma2eSEXP);
    Rcpp::traits::input_parameter< List >::type priors(priorsSEXP);
    rcpp_result_gen = Rcpp::wrap(updatePhi(dat, ai, bi, kappa_hk, d_hk, kappa_reg, d_reg, sigma2e, priors));
    return rcpp_result_gen;
END_RCPP
}
// updateSigma2D
double updateSigma2D(List dat, NumericVector d_pos, NumericVector d_hk, NumericVector d_reg, List priors);
RcppExport SEXP _RCRnormCpp_updateSigma2D(SEXP datSEXP, SEXP d_posSEXP, SEXP d_hkSEXP, SEXP d_regSEXP, SEXP priorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dat(datSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d_pos(d_posSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d_hk(d_hkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d_reg(d_regSEXP);
    Rcpp::traits::input_parameter< List >::type priors(priorsSEXP);
    rcpp_result_gen = Rcpp::wrap(updateSigma2D(dat, d_pos, d_hk, d_reg, priors));
    return rcpp_result_gen;
END_RCPP
}
// updateSigma2Dneg
double updateSigma2Dneg(List dat, NumericVector d_neg, List priors);
RcppExport SEXP _RCRnormCpp_updateSigma2Dneg(SEXP datSEXP, SEXP d_negSEXP, SEXP priorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dat(datSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d_neg(d_negSEXP);
    Rcpp::traits::input_parameter< List >::type priors(priorsSEXP);
    rcpp_result_gen = Rcpp::wrap(updateSigma2Dneg(dat, d_neg, priors));
    return rcpp_result_gen;
END_RCPP
}
// updateSigma2E
double updateSigma2E(List dat, NumericVector ai, NumericVector bi, NumericVector pos_conc, NumericVector phi, NumericVector kappa_hk, NumericVector kappa_reg, NumericVector d_pos, NumericVector d_hk, NumericVector d_reg, List priors);
RcppExport SEXP _RCRnormCpp_updateSigma2E(SEXP datSEXP, SEXP aiSEXP, SEXP biSEXP, SEXP pos_concSEXP, SEXP phiSEXP, SEXP kappa_hkSEXP, SEXP kappa_regSEXP, SEXP d_posSEXP, SEXP d_hkSEXP, SEXP d_regSEXP, SEXP priorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dat(datSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ai(aiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bi(biSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pos_conc(pos_concSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type phi(phiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kappa_hk(kappa_hkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kappa_reg(kappa_regSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d_pos(d_posSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d_hk(d_hkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d_reg(d_regSEXP);
    Rcpp::traits::input_parameter< List >::type priors(priorsSEXP);
    rcpp_result_gen = Rcpp::wrap(updateSigma2E(dat, ai, bi, pos_conc, phi, kappa_hk, kappa_reg, d_pos, d_hk, d_reg, priors));
    return rcpp_result_gen;
END_RCPP
}
// updateSigma2Eneg
double updateSigma2Eneg(List dat, NumericVector ai, NumericVector bi, double cc, NumericVector d_neg, List priors);
RcppExport SEXP _RCRnormCpp_updateSigma2Eneg(SEXP datSEXP, SEXP aiSEXP, SEXP biSEXP, SEXP ccSEXP, SEXP d_negSEXP, SEXP priorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dat(datSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ai(aiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bi(biSEXP);
    Rcpp::traits::input_parameter< double >::type cc(ccSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type d_neg(d_negSEXP);
    Rcpp::traits::input_parameter< List >::type priors(priorsSEXP);
    rcpp_result_gen = Rcpp::wrap(updateSigma2Eneg(dat, ai, bi, cc, d_neg, priors));
    return rcpp_result_gen;
END_RCPP
}
// updateSigma2KappaHk
double updateSigma2KappaHk(List dat, NumericVector kappa_hk, NumericVector lambda_hk, List priors);
RcppExport SEXP _RCRnormCpp_updateSigma2KappaHk(SEXP datSEXP, SEXP kappa_hkSEXP, SEXP lambda_hkSEXP, SEXP priorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dat(datSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kappa_hk(kappa_hkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda_hk(lambda_hkSEXP);
    Rcpp::traits::input_parameter< List >::type priors(priorsSEXP);
    rcpp_result_gen = Rcpp::wrap(updateSigma2KappaHk(dat, kappa_hk, lambda_hk, priors));
    return rcpp_result_gen;
END_RCPP
}
// updateSigma2KappaReg
double updateSigma2KappaReg(List dat, NumericVector kappa_reg, NumericVector lambda_reg, List priors);
RcppExport SEXP _RCRnormCpp_updateSigma2KappaReg(SEXP datSEXP, SEXP kappa_regSEXP, SEXP lambda_regSEXP, SEXP priorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dat(datSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type kappa_reg(kappa_regSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda_reg(lambda_regSEXP);
    Rcpp::traits::input_parameter< List >::type priors(priorsSEXP);
    rcpp_result_gen = Rcpp::wrap(updateSigma2KappaReg(dat, kappa_reg, lambda_reg, priors));
    return rcpp_result_gen;
END_RCPP
}
// updateSigma2a
double updateSigma2a(List dat, NumericVector ai, double mu_a, List priors);
RcppExport SEXP _RCRnormCpp_updateSigma2a(SEXP datSEXP, SEXP aiSEXP, SEXP mu_aSEXP, SEXP priorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dat(datSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ai(aiSEXP);
    Rcpp::traits::input_parameter< double >::type mu_a(mu_aSEXP);
    Rcpp::traits::input_parameter< List >::type priors(priorsSEXP);
    rcpp_result_gen = Rcpp::wrap(updateSigma2a(dat, ai, mu_a, priors));
    return rcpp_result_gen;
END_RCPP
}
// updateSigma2b
double updateSigma2b(List dat, NumericVector bi, double mu_b, List priors);
RcppExport SEXP _RCRnormCpp_updateSigma2b(SEXP datSEXP, SEXP biSEXP, SEXP mu_bSEXP, SEXP priorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dat(datSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type bi(biSEXP);
    Rcpp::traits::input_parameter< double >::type mu_b(mu_bSEXP);
    Rcpp::traits::input_parameter< List >::type priors(priorsSEXP);
    rcpp_result_gen = Rcpp::wrap(updateSigma2b(dat, bi, mu_b, priors));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RCRnormCpp_hello_world", (DL_FUNC) &_RCRnormCpp_hello_world, 0},
    {"_RCRnormCpp_linearRegression", (DL_FUNC) &_RCRnormCpp_linearRegression, 2},
    {"_RCRnormCpp_rinvGamma", (DL_FUNC) &_RCRnormCpp_rinvGamma, 3},
    {"_RCRnormCpp_lbLambdaUb", (DL_FUNC) &_RCRnormCpp_lbLambdaUb, 3},
    {"_RCRnormCpp_lambdaLbUb", (DL_FUNC) &_RCRnormCpp_lambdaLbUb, 3},
    {"_RCRnormCpp_lbUbLambda", (DL_FUNC) &_RCRnormCpp_lbUbLambda, 3},
    {"_RCRnormCpp_rtruncatedStandardNormPositive", (DL_FUNC) &_RCRnormCpp_rtruncatedStandardNormPositive, 3},
    {"_RCRnormCpp_rtruncatedStandardNormPositiveExtreme", (DL_FUNC) &_RCRnormCpp_rtruncatedStandardNormPositiveExtreme, 3},
    {"_RCRnormCpp_rtruncatedStandardNormNegative", (DL_FUNC) &_RCRnormCpp_rtruncatedStandardNormNegative, 3},
    {"_RCRnormCpp_rtruncatedStandardNormNegativeExtreme", (DL_FUNC) &_RCRnormCpp_rtruncatedStandardNormNegativeExtreme, 3},
    {"_RCRnormCpp_rtruncatedStandardNorm", (DL_FUNC) &_RCRnormCpp_rtruncatedStandardNorm, 3},
    {"_RCRnormCpp_rtruncatedNorm", (DL_FUNC) &_RCRnormCpp_rtruncatedNorm, 5},
    {"_RCRnormCpp_generateSampleMatrix", (DL_FUNC) &_RCRnormCpp_generateSampleMatrix, 2},
    {"_RCRnormCpp_sampler", (DL_FUNC) &_RCRnormCpp_sampler, 5},
    {"_RCRnormCpp_findA1", (DL_FUNC) &_RCRnormCpp_findA1, 5},
    {"_RCRnormCpp_findA2", (DL_FUNC) &_RCRnormCpp_findA2, 5},
    {"_RCRnormCpp_findA3", (DL_FUNC) &_RCRnormCpp_findA3, 7},
    {"_RCRnormCpp_findA4", (DL_FUNC) &_RCRnormCpp_findA4, 7},
    {"_RCRnormCpp_updateAi", (DL_FUNC) &_RCRnormCpp_updateAi, 15},
    {"_RCRnormCpp_findB1", (DL_FUNC) &_RCRnormCpp_findB1, 5},
    {"_RCRnormCpp_findB2", (DL_FUNC) &_RCRnormCpp_findB2, 5},
    {"_RCRnormCpp_findB3", (DL_FUNC) &_RCRnormCpp_findB3, 7},
    {"_RCRnormCpp_findB4", (DL_FUNC) &_RCRnormCpp_findB4, 7},
    {"_RCRnormCpp_updateBi", (DL_FUNC) &_RCRnormCpp_updateBi, 15},
    {"_RCRnormCpp_updateCc", (DL_FUNC) &_RCRnormCpp_updateCc, 6},
    {"_RCRnormCpp_updateDhk", (DL_FUNC) &_RCRnormCpp_updateDhk, 7},
    {"_RCRnormCpp_updateDneg", (DL_FUNC) &_RCRnormCpp_updateDneg, 6},
    {"_RCRnormCpp_updateDpos", (DL_FUNC) &_RCRnormCpp_updateDpos, 6},
    {"_RCRnormCpp_updateDreg", (DL_FUNC) &_RCRnormCpp_updateDreg, 7},
    {"_RCRnormCpp_updateKappaHk", (DL_FUNC) &_RCRnormCpp_updateKappaHk, 8},
    {"_RCRnormCpp_updateKappaReg", (DL_FUNC) &_RCRnormCpp_updateKappaReg, 8},
    {"_RCRnormCpp_updateLambdaHk", (DL_FUNC) &_RCRnormCpp_updateLambdaHk, 4},
    {"_RCRnormCpp_updateLambdaReg", (DL_FUNC) &_RCRnormCpp_updateLambdaReg, 4},
    {"_RCRnormCpp_updateMuA", (DL_FUNC) &_RCRnormCpp_updateMuA, 4},
    {"_RCRnormCpp_updateMuB", (DL_FUNC) &_RCRnormCpp_updateMuB, 4},
    {"_RCRnormCpp_updatePhi", (DL_FUNC) &_RCRnormCpp_updatePhi, 9},
    {"_RCRnormCpp_updateSigma2D", (DL_FUNC) &_RCRnormCpp_updateSigma2D, 5},
    {"_RCRnormCpp_updateSigma2Dneg", (DL_FUNC) &_RCRnormCpp_updateSigma2Dneg, 3},
    {"_RCRnormCpp_updateSigma2E", (DL_FUNC) &_RCRnormCpp_updateSigma2E, 11},
    {"_RCRnormCpp_updateSigma2Eneg", (DL_FUNC) &_RCRnormCpp_updateSigma2Eneg, 6},
    {"_RCRnormCpp_updateSigma2KappaHk", (DL_FUNC) &_RCRnormCpp_updateSigma2KappaHk, 4},
    {"_RCRnormCpp_updateSigma2KappaReg", (DL_FUNC) &_RCRnormCpp_updateSigma2KappaReg, 4},
    {"_RCRnormCpp_updateSigma2a", (DL_FUNC) &_RCRnormCpp_updateSigma2a, 4},
    {"_RCRnormCpp_updateSigma2b", (DL_FUNC) &_RCRnormCpp_updateSigma2b, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_RCRnormCpp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
